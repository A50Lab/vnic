// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kycchain/kyc/v1/issuer.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Issuer represents a registered KYC issuer
type Issuer struct {
	// address is the cosmos address of the issuer
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// name is the human-readable name of the issuer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// public_key is the public key used for signing verifiable credentials
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// max_kyc_level is the maximum KYC level this issuer can grant
	MaxKycLevel int32 `protobuf:"varint,4,opt,name=max_kyc_level,json=maxKycLevel,proto3" json:"max_kyc_level,omitempty"`
	// active indicates if the issuer is currently active
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	// metadata contains additional issuer information
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Issuer) Reset()         { *m = Issuer{} }
func (m *Issuer) String() string { return proto.CompactTextString(m) }
func (*Issuer) ProtoMessage()    {}
func (*Issuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff2ce42c2416ad, []int{0}
}
func (m *Issuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Issuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Issuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Issuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issuer.Merge(m, src)
}
func (m *Issuer) XXX_Size() int {
	return m.Size()
}
func (m *Issuer) XXX_DiscardUnknown() {
	xxx_messageInfo_Issuer.DiscardUnknown(m)
}

var xxx_messageInfo_Issuer proto.InternalMessageInfo

func (m *Issuer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Issuer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issuer) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Issuer) GetMaxKycLevel() int32 {
	if m != nil {
		return m.MaxKycLevel
	}
	return 0
}

func (m *Issuer) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Issuer) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Issuer)(nil), "kycchain.kyc.v1.Issuer")
	proto.RegisterMapType((map[string]string)(nil), "kycchain.kyc.v1.Issuer.MetadataEntry")
}

func init() { proto.RegisterFile("kycchain/kyc/v1/issuer.proto", fileDescriptor_0dff2ce42c2416ad) }

var fileDescriptor_0dff2ce42c2416ad = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0xce, 0xf4, 0x92, 0xbf, 0x3d, 0xa5, 0xfc, 0x65, 0x28, 0x32, 0x14, 0x8d, 0xa1, 0x20, 0x04,
	0x17, 0x13, 0xaa, 0x1b, 0xd1, 0x5d, 0x41, 0x44, 0xaa, 0x9b, 0x2c, 0xdd, 0x94, 0xe9, 0x74, 0xa8,
	0x21, 0xb7, 0x92, 0x4c, 0x87, 0xce, 0x5b, 0xb8, 0xf3, 0x95, 0xba, 0xec, 0xd2, 0x95, 0x48, 0xfb,
	0x22, 0x92, 0x49, 0x2b, 0xe8, 0xee, 0xbb, 0x1d, 0x38, 0xdf, 0x07, 0xa7, 0x91, 0xe6, 0xfc, 0x95,
	0x85, 0xa9, 0x1f, 0x69, 0xee, 0xab, 0x91, 0x1f, 0x16, 0xc5, 0x4a, 0xe4, 0x74, 0x99, 0x67, 0x32,
	0xc3, 0xff, 0x8f, 0x2e, 0x8d, 0x34, 0xa7, 0x6a, 0x34, 0xe8, 0x2f, 0xb2, 0x45, 0x66, 0x3c, 0xbf,
	0x44, 0x55, 0x6c, 0xf8, 0x5e, 0x03, 0xfb, 0xd1, 0xdc, 0x61, 0x02, 0xff, 0xd8, 0x7c, 0x9e, 0x8b,
	0xa2, 0x20, 0xc8, 0x45, 0x5e, 0x3b, 0x38, 0x52, 0x8c, 0xa1, 0x91, 0xb2, 0x44, 0x90, 0x9a, 0x91,
	0x0d, 0xc6, 0x67, 0x00, 0xcb, 0xd5, 0x2c, 0x0e, 0xf9, 0x34, 0x12, 0x9a, 0xd4, 0x8d, 0xd3, 0xae,
	0x94, 0x89, 0xd0, 0x78, 0x08, 0xdd, 0x84, 0xad, 0xa7, 0x91, 0xe6, 0xd3, 0x58, 0x28, 0x11, 0x93,
	0x86, 0x8b, 0xbc, 0x66, 0xd0, 0x49, 0xd8, 0x7a, 0xa2, 0xf9, 0x53, 0x29, 0xe1, 0x13, 0xb0, 0x19,
	0x97, 0xa1, 0x12, 0xa4, 0xe9, 0x22, 0xaf, 0x15, 0x1c, 0x18, 0x7e, 0x80, 0x56, 0x22, 0x24, 0x9b,
	0x33, 0xc9, 0x88, 0xed, 0xd6, 0xbd, 0xce, 0xd5, 0x05, 0xfd, 0xd3, 0x86, 0x56, 0x3f, 0xd3, 0xe7,
	0x43, 0xee, 0x3e, 0x95, 0xb9, 0x1e, 0x37, 0x36, 0x9f, 0xe7, 0x56, 0xf0, 0x73, 0x3c, 0xb8, 0x83,
	0xee, 0xaf, 0x00, 0xee, 0x41, 0xbd, 0xfc, 0xb6, 0xaa, 0x57, 0x42, 0xdc, 0x87, 0xa6, 0x62, 0xf1,
	0xea, 0xd8, 0xad, 0x22, 0xb7, 0xb5, 0x1b, 0x34, 0xbe, 0xdc, 0xec, 0x1c, 0xb4, 0xdd, 0x39, 0xe8,
	0x6b, 0xe7, 0xa0, 0xb7, 0xbd, 0x63, 0x6d, 0xf7, 0x8e, 0xf5, 0xb1, 0x77, 0xac, 0x97, 0x9e, 0x4a,
	0x43, 0xee, 0xaf, 0xcd, 0xec, 0x52, 0x2f, 0x45, 0x31, 0xb3, 0xcd, 0x98, 0xd7, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7a, 0x28, 0xe6, 0x42, 0x93, 0x01, 0x00, 0x00,
}

func (m *Issuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Issuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintIssuer(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIssuer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIssuer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MaxKycLevel != 0 {
		i = encodeVarintIssuer(dAtA, i, uint64(m.MaxKycLevel))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintIssuer(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIssuer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIssuer(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIssuer(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssuer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Issuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIssuer(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIssuer(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovIssuer(uint64(l))
	}
	if m.MaxKycLevel != 0 {
		n += 1 + sovIssuer(uint64(m.MaxKycLevel))
	}
	if m.Active {
		n += 2
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIssuer(uint64(len(k))) + 1 + len(v) + sovIssuer(uint64(len(v)))
			n += mapEntrySize + 1 + sovIssuer(uint64(mapEntrySize))
		}
	}
	return n
}

func sovIssuer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssuer(x uint64) (n int) {
	return sovIssuer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Issuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssuer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssuer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssuer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssuer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssuer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssuer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssuer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxKycLevel", wireType)
			}
			m.MaxKycLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxKycLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssuer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssuer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIssuer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIssuer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIssuer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIssuer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIssuer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthIssuer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthIssuer
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIssuer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthIssuer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssuer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssuer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssuer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssuer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssuer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssuer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssuer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssuer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssuer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssuer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssuer = fmt.Errorf("proto: unexpected end of group")
)
