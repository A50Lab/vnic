// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { EventEpochEnd } from "./types/cosmos/epochs/v1beta1/events";
import { GenesisState } from "./types/cosmos/epochs/v1beta1/genesis";
import { QueryEpochInfosRequest } from "./types/cosmos/epochs/v1beta1/query";
import { EventEpochStart } from "./types/cosmos/epochs/v1beta1/events";
import { EpochInfo } from "./types/cosmos/epochs/v1beta1/genesis";
import { QueryEpochInfosResponse } from "./types/cosmos/epochs/v1beta1/query";
import { QueryCurrentEpochRequest } from "./types/cosmos/epochs/v1beta1/query";
import { QueryCurrentEpochResponse } from "./types/cosmos/epochs/v1beta1/query";

import { EventEpochEnd as typeEventEpochEnd} from "./types"
import { EventEpochStart as typeEventEpochStart} from "./types"
import { EpochInfo as typeEpochInfo} from "./types"

export { EventEpochEnd, GenesisState, QueryEpochInfosRequest, EventEpochStart, EpochInfo, QueryEpochInfosResponse, QueryCurrentEpochRequest, QueryCurrentEpochResponse };

type sendEventEpochEndParams = {
  value: EventEpochEnd,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryEpochInfosRequestParams = {
  value: QueryEpochInfosRequest,
  fee?: StdFee,
  memo?: string
};

type sendEventEpochStartParams = {
  value: EventEpochStart,
  fee?: StdFee,
  memo?: string
};

type sendEpochInfoParams = {
  value: EpochInfo,
  fee?: StdFee,
  memo?: string
};

type sendQueryEpochInfosResponseParams = {
  value: QueryEpochInfosResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryCurrentEpochRequestParams = {
  value: QueryCurrentEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryCurrentEpochResponseParams = {
  value: QueryCurrentEpochResponse,
  fee?: StdFee,
  memo?: string
};


type eventEpochEndParams = {
  value: EventEpochEnd,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryEpochInfosRequestParams = {
  value: QueryEpochInfosRequest,
};

type eventEpochStartParams = {
  value: EventEpochStart,
};

type epochInfoParams = {
  value: EpochInfo,
};

type queryEpochInfosResponseParams = {
  value: QueryEpochInfosResponse,
};

type queryCurrentEpochRequestParams = {
  value: QueryCurrentEpochRequest,
};

type queryCurrentEpochResponseParams = {
  value: QueryCurrentEpochResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendEventEpochEnd({ value, fee, memo }: sendEventEpochEndParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEventEpochEnd: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.eventEpochEnd({ value: EventEpochEnd.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEventEpochEnd: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryEpochInfosRequest({ value, fee, memo }: sendQueryEpochInfosRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryEpochInfosRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryEpochInfosRequest({ value: QueryEpochInfosRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryEpochInfosRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEventEpochStart({ value, fee, memo }: sendEventEpochStartParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEventEpochStart: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.eventEpochStart({ value: EventEpochStart.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEventEpochStart: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEpochInfo({ value, fee, memo }: sendEpochInfoParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEpochInfo: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.epochInfo({ value: EpochInfo.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEpochInfo: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryEpochInfosResponse({ value, fee, memo }: sendQueryEpochInfosResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryEpochInfosResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryEpochInfosResponse({ value: QueryEpochInfosResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryEpochInfosResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryCurrentEpochRequest({ value, fee, memo }: sendQueryCurrentEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryCurrentEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryCurrentEpochRequest({ value: QueryCurrentEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryCurrentEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryCurrentEpochResponse({ value, fee, memo }: sendQueryCurrentEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryCurrentEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryCurrentEpochResponse({ value: QueryCurrentEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryCurrentEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		eventEpochEnd({ value }: eventEpochEndParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.EventEpochEnd", value: EventEpochEnd.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EventEpochEnd: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryEpochInfosRequest({ value }: queryEpochInfosRequestParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.QueryEpochInfosRequest", value: QueryEpochInfosRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryEpochInfosRequest: Could not create message: ' + e.message)
			}
		},
		
		eventEpochStart({ value }: eventEpochStartParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.EventEpochStart", value: EventEpochStart.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EventEpochStart: Could not create message: ' + e.message)
			}
		},
		
		epochInfo({ value }: epochInfoParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.EpochInfo", value: EpochInfo.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EpochInfo: Could not create message: ' + e.message)
			}
		},
		
		queryEpochInfosResponse({ value }: queryEpochInfosResponseParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.QueryEpochInfosResponse", value: QueryEpochInfosResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryEpochInfosResponse: Could not create message: ' + e.message)
			}
		},
		
		queryCurrentEpochRequest({ value }: queryCurrentEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.QueryCurrentEpochRequest", value: QueryCurrentEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryCurrentEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryCurrentEpochResponse({ value }: queryCurrentEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/cosmos.epochs.v1beta1.QueryCurrentEpochResponse", value: QueryCurrentEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryCurrentEpochResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						EventEpochEnd: getStructure(typeEventEpochEnd.fromPartial({})),
						EventEpochStart: getStructure(typeEventEpochStart.fromPartial({})),
						EpochInfo: getStructure(typeEpochInfo.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			CosmosEpochsV_1Beta_1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;